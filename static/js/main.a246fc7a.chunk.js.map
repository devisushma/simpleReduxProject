{"version":3,"sources":["store.js","reduxSample/actionTypes.js","reduxSample/reducer.js","reduxSample/selector.js","reduxSample/CountComponent.js","reduxSample/CountContainer.js","reduxSample/actions.js","App.js","reportWebVitals.js","index.js"],"names":["staticReducers","store","initialState","createStore","createReducer","asyncReducers","injectReducer","key","asyncReducer","replaceReducer","configureStore","combineReducers","nameSpace","incrementClick","decrementClick","count","reducer","state","type","getCount","createSelector","CountComponent","handleIncrement","handleDecrement","componentHooks","currentHookIndex","pair","nextState","console","log","useState1","fname","setFname","value","onChange","e","target","onClick","data-testid","className","defaultPropTypes","mapDispatchToProps","connect","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAIMA,EAAiB,GAuBRC,EAlBe,SAACC,GAC7B,IAAMD,EAAQE,YAAYC,IAAiBF,GAa3C,OAVAD,EAAMI,cAAgB,GAItBJ,EAAMK,cAAgB,SAACC,EAAKC,GAC1BP,EAAMI,cAAcE,GAAOC,EAC3BP,EAAMQ,eAAeL,EAAcH,EAAMI,iBAIpCJ,EAGKS,CAAe,IAG7B,SAASN,EAAcC,GACrB,OAAOM,YAAgB,2BAClBX,GACAK,IChCA,IAAMO,EAAY,QACZC,EAAc,UAAMD,EAAN,oBACdE,EAAc,UAAMF,EAAN,oBCArBV,GDCmB,UAAMU,EAAN,aCDJ,CACjBG,MAAQ,IAcGC,EAXC,WAAmC,IAAlCC,EAAiC,uDAAzBf,EAAyB,yCAAVgB,EAAU,EAAVA,KACvC,OAAOA,GACJ,KAAKL,EACD,OAAO,2BAAII,GAAX,IAAkBF,MAAME,EAAMF,MAAQ,IAC1C,KAAKD,EACD,OAAO,2BAAIG,GAAX,IAAkBF,MAAME,EAAMF,MAAQ,IAC1C,QACE,OAAOE,I,OCRAE,EAAWC,YACvB,CAHgB,SAAAH,GAAK,OAAIA,EAAK,SAI7B,qBAAGF,S,uBCHCM,EAAiB,SAAC,GAAmD,IAAjDN,EAAgD,EAAhDA,MAAQO,EAAwC,EAAxCA,gBAAkBC,EAAsB,EAAtBA,gBAEhDC,EAAiB,GACjBC,EAAmB,EA+BnB,MA7BJ,SAAmBvB,GACjB,IAAIwB,EAAOF,EAAeC,GAC1B,OAAIC,GAIFD,IACOC,IAaTA,EAAO,CAACxB,EARR,SAAkByB,GAGhBD,EAAK,GAAKC,IASZH,EAAeC,GAAoBC,EACnCE,QAAQC,IAAIH,EAAK,SACjBD,IACOC,GAEmBI,CAAU,IAAlC,mBAAKC,EAAL,KAAYC,EAAZ,KACA,OACH,qCACC,kEAAmCjB,KAC7B,uBAAOkB,MAAOF,EAAOG,SAAU,SAAAC,GAC3BP,QAAQC,IAAI,SACZG,EAASG,EAAEC,OAAOH,UAEtB,4BAAIF,IACJ,wBAAQM,QAASf,EAAiBgB,cAAY,mBAA9C,wBACN,wBAAQD,QAASd,EAAiBgB,UAAW,mBAAoBD,cAAY,mBAA7E,6BAYFjB,EAAemB,iBAAmB,CAC9BzB,MAAM,EACNQ,gBAAiB,aACjBD,gBAAiB,cAGND,QCnDToB,EAAqB,CACzBnB,gBCd6B,iBAAO,CAClCJ,KAAKL,IDcPU,gBCX6B,iBAAO,CAClCL,KAAKJ,KDcTb,EAAMK,cAAcM,EAAWI,GAEhB0B,mBAZS,SAAAzB,GAAK,MAAK,CAChCF,MAAOI,EAASF,MAWsBwB,EAAzBC,CAA6CrB,GEX7CsB,MARf,WACE,OACE,qBAAKJ,UAAU,MAAf,SACI,cAAC,EAAD,OCKOK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAD,CAAUrD,MAAOA,EAAjB,SACE,cAAC,IAAMsD,WAAP,UACC,cAAC,EAAD,QAGHC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a246fc7a.chunk.js","sourcesContent":["import { createStore, combineReducers } from 'redux'\r\n// import count from 'reduxSample/reducer'\r\n\r\n// Define the Reducers that will always be present in the application\r\nconst staticReducers = {\r\n  // count:count\r\n}\r\n\r\n// Configure the store\r\nexport const configureStore = (initialState)  => {\r\n  const store = createStore(createReducer(), initialState)\r\n\r\n  // Add a dictionary to keep track of the registered async reducers\r\n  store.asyncReducers = {}\r\n\r\n  // Create an inject reducer function\r\n  // This function adds the async reducer, and creates a new combined reducer\r\n  store.injectReducer = (key, asyncReducer) => {\r\n    store.asyncReducers[key] = asyncReducer\r\n    store.replaceReducer(createReducer(store.asyncReducers))\r\n  }\r\n\r\n  // Return the modified store\r\n  return store\r\n}\r\n\r\nconst store = configureStore({}) \r\nexport default store; \r\n\r\nfunction createReducer(asyncReducers) {\r\n  return combineReducers({\r\n    ...staticReducers,\r\n    ...asyncReducers\r\n  })\r\n}","export const nameSpace = \"count\"\r\nexport const incrementClick = `${nameSpace}_INCREMENT_CLICK`\r\nexport const decrementClick = `${nameSpace}_DECREMENT_CLICK`\r\nexport const getDataClick = `${nameSpace}_GET_DATA`","import { incrementClick, decrementClick } from \"./actionTypes\"\r\n\r\nconst initialState = {\r\n    count : 0\r\n}\r\n\r\nconst reducer = (state = initialState, {type}) => {\r\n switch(type) {\r\n    case incrementClick: \r\n        return {...state, count:state.count + 1}\r\n    case decrementClick: \r\n        return {...state, count:state.count - 1}\r\n    default:\r\n      return state      \r\n }\r\n}\r\n\r\nexport default reducer;","import { createSelector } from 'reselect';\r\nimport { nameSpace } from \"./actionTypes\";\r\n\r\nconst getState = state => state[nameSpace]\r\n\r\nexport const getCount = createSelector(\r\n [getState],\r\n  ({ count }) => count \r\n);","import React from 'react';\r\nimport { number, func } from \"prop-types\";\r\nimport \"./style.css\";\r\n\r\nconst CountComponent = ({ count,  handleIncrement,  handleDecrement }) => {\r\n\r\nlet componentHooks = [];\r\nlet currentHookIndex = 0;\r\n\r\nfunction useState1(initialState) {\r\n  let pair = componentHooks[currentHookIndex];\r\n  if (pair) {\r\n    // This is not the first render,\r\n    // so the state pair already exists.\r\n    // Return it and prepare for next Hook call.\r\n    currentHookIndex++;\r\n    return pair;\r\n  }\r\n\r\n  \r\n\r\n  function setState(nextState) {\r\n    // When the user requests a state change,\r\n    // put the new value into the pair.\r\n    pair[0] = nextState;\r\n  }\r\n\r\n  // This is the first time we're rendering,\r\n  // so create a state pair and store it.\r\n  pair = [initialState, setState];\r\n\r\n  // Store the pair for future renders\r\n  // and prepare for the next Hook call.\r\n  componentHooks[currentHookIndex] = pair;\r\n  console.log(pair,\"hhhhh\")\r\n  currentHookIndex++;\r\n  return pair;\r\n}\r\n    let [fname, setFname] = useState1('')  \r\n    return (\r\n\t<>\r\n\t\t<p>{`See the count value here :  ${count}`}</p>\r\n        <input value={fname} onChange={e => {\r\n            console.log(\"kkkkk\")\r\n            setFname(e.target.value)}\r\n        }/>\r\n        <p>{fname}</p>\r\n        <button onClick={handleIncrement} data-testid=\"increment-button\">Increment </button>\r\n\t\t<button onClick={handleDecrement} className={\"decrement-button\"} data-testid=\"decrement-button\"> Decrement </button>\r\n        {/* <button onClick={getData}>Get Data</button> */}\r\n    </>\r\n)};\r\n    \r\nCountComponent.propTypes = {\r\n    count:number,\r\n    handleDecrement:func,\r\n    handleIncrement:func,\r\n    getData:func\r\n}\r\n\r\nCountComponent.defaultPropTypes = {\r\n    count:0,\r\n    handleDecrement: () => {},\r\n    handleIncrement: () => {}\r\n}\r\n\r\nexport default CountComponent;","import { connect } from \"react-redux\";\r\nimport store from \"../store\"\r\nimport {\r\n  handleIncrement,\r\n  handleDecrement\r\n} from \"./actions\"\r\nimport reducer from \"./reducer\";\r\nimport { nameSpace } from \"./actionTypes\";\r\nimport { getCount } from \"./selector\"\r\nimport CountComponent from \"./CountComponent\"\r\n\r\nconst mapStateToProps = state => ({\r\n  count: getCount(state)\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  handleIncrement,\r\n  handleDecrement,\r\n  // getData\r\n}\r\n\r\nstore.injectReducer(nameSpace, reducer)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountComponent)","import { incrementClick, decrementClick } from \"./actionTypes\"\r\n\r\nexport const handleIncrement = () => ({\r\n    type:incrementClick\r\n})\r\n\r\nexport const handleDecrement = () => ({\r\n    type:decrementClick\r\n})\r\n\r\n// export const getDataClick = () => ({\r\n    \r\n// })","import React from \"react\"\nimport './App.css';\nimport CountComponent from \"./reduxSample/CountContainer\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <CountComponent />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport store from './store'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n     <App />\n   </React.StrictMode>\n   </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}